{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "7e2b59c3",
   "metadata": {},
   "source": [
    "# Generating DRMs for GBM detectors\n",
    "\n",
    "The main purpose for ```gbm_drm_gen``` is a fast and easy way to generate detector response matrices for the Fermi-GBM detectors in a pythonic way.\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "When we want to generate DRMS for GBM detectors, we simply need to obtain the proper data "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "23c8284e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-08-24T17:12:18.865708Z",
     "iopub.status.busy": "2021-08-24T17:12:18.865132Z",
     "iopub.status.idle": "2021-08-24T17:12:24.283433Z",
     "shell.execute_reply": "2021-08-24T17:12:24.283901Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING: AstropyDeprecationWarning: The private astropy._erfa module has been made into its own package, pyerfa, which is a dependency of astropy and can be imported directly using \"import erfa\" [astropy._erfa]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[\u001b[35mWARNING \u001b[0m]\u001b[35m The naima package is not available. Models that depend on it will not be available\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[\u001b[35mWARNING \u001b[0m]\u001b[35m The GSL library or the pygsl wrapper cannot be loaded. Models that depend on it will not be available.\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[\u001b[35mWARNING \u001b[0m]\u001b[35m The ebltable package is not available. Models that depend on it will not be available\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[\u001b[32mINFO    \u001b[0m]\u001b[32m Starting 3ML!\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[\u001b[35mWARNING \u001b[0m]\u001b[35m no display variable set. using backend for graphics without display (agg)\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[\u001b[35mWARNING \u001b[0m]\u001b[35m ROOT minimizer not available\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[\u001b[35mWARNING \u001b[0m]\u001b[35m Multinest minimizer not available\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[\u001b[35mWARNING \u001b[0m]\u001b[35m PyGMO is not available\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[\u001b[35mWARNING \u001b[0m]\u001b[35m The cthreeML package is not installed. You will not be able to use plugins which require the C/C++ interface (currently HAWC)\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[\u001b[35mWARNING \u001b[0m]\u001b[35m Could not import plugin FermiLATLike.py. Do you have the relative instrument software installed and configured?\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[\u001b[35mWARNING \u001b[0m]\u001b[35m Could not import plugin HAWCLike.py. Do you have the relative instrument software installed and configured?\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[\u001b[35mWARNING \u001b[0m]\u001b[35m Env. variable OMP_NUM_THREADS is not set. Please set it to 1 for optimal performances in 3ML\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[\u001b[35mWARNING \u001b[0m]\u001b[35m Env. variable MKL_NUM_THREADS is not set. Please set it to 1 for optimal performances in 3ML\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[\u001b[35mWARNING \u001b[0m]\u001b[35m Env. variable NUMEXPR_NUM_THREADS is not set. Please set it to 1 for optimal performances in 3ML\u001b[0m\n"
     ]
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import astropy.io.fits as fits\n",
    "\n",
    "import numpy as np\n",
    "\n",
    "%matplotlib inline\n",
    "\n",
    "from jupyterthemes import jtplot\n",
    "\n",
    "jtplot.style(context=\"talk\", grid=False)\n",
    "\n",
    "from gbm_drm_gen import DRMGen\n",
    "from gbm_drm_gen.utils.package_data import get_path_of_data_file\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "22115d6a",
   "metadata": {},
   "source": [
    "## quick start"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a09ff50a",
   "metadata": {},
   "source": [
    "To create a DRM generator for TTE data, we need the TTE, CSPEC, and the TRIGDAT data files.\n",
    "* The CSPEC data contains the output side of the DRM's energy bounds. \n",
    "* The TRIGDAT data contains the spacecraft orientation data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "a57a786c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-08-24T17:12:24.289028Z",
     "iopub.status.busy": "2021-08-24T17:12:24.288412Z",
     "iopub.status.idle": "2021-08-24T17:12:26.569444Z",
     "shell.execute_reply": "2021-08-24T17:12:26.568907Z"
    }
   },
   "outputs": [],
   "source": [
    "trigdat_file = get_path_of_data_file('example_data/glg_trigdat_all_bn110721200_v01.fit')\n",
    "cspec_file = get_path_of_data_file('example_data/glg_cspec_n6_bn110721200_v00.pha')\n",
    "\n",
    "\n",
    "# create the generator\n",
    "gbm_n6_generator = DRMGen.from_128_bin_data(det_name= \"n6\",\n",
    "                             time=0, # time relative to T0 or trigger time.\n",
    "                             trigdat = trigdat_file,\n",
    "                             mat_type = 2, # direct response + atmospheric scattering\n",
    "                             cspecfile = cspec_file)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b3c6ac1a",
   "metadata": {},
   "source": [
    "We can set the location of the source directly. The first run can be a bit slow as ```numba``` is used in the background to be very fast. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "957862d2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-08-24T17:12:26.579114Z",
     "iopub.status.busy": "2021-08-24T17:12:26.578211Z",
     "iopub.status.idle": "2021-08-24T17:12:55.216202Z",
     "shell.execute_reply": "2021-08-24T17:12:55.216970Z"
    }
   },
   "outputs": [],
   "source": [
    "gbm_n6_generator.set_location(ra=329,dec = -38.2)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c5951707",
   "metadata": {},
   "source": [
    "We can now checkout the matrix object created in the background:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "b54a4333",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-08-24T17:12:55.221138Z",
     "iopub.status.busy": "2021-08-24T17:12:55.219993Z",
     "iopub.status.idle": "2021-08-24T17:12:55.231428Z",
     "shell.execute_reply": "2021-08-24T17:12:55.232197Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[1.21529588e-02, 2.66685346e-02, 3.35702294e-02, ...,\n",
       "        1.71696052e-02, 1.79967322e-02, 0.00000000e+00],\n",
       "       [2.40656348e-03, 9.02243768e-03, 2.44969585e-02, ...,\n",
       "        1.76004235e-02, 1.84410737e-02, 0.00000000e+00],\n",
       "       [0.00000000e+00, 6.64336828e-04, 4.79652366e-03, ...,\n",
       "        1.75084305e-02, 1.83343065e-02, 0.00000000e+00],\n",
       "       ...,\n",
       "       [0.00000000e+00, 0.00000000e+00, 0.00000000e+00, ...,\n",
       "        1.18137462e-01, 1.18589681e-01, 0.00000000e+00],\n",
       "       [0.00000000e+00, 0.00000000e+00, 0.00000000e+00, ...,\n",
       "        1.19105016e-01, 1.19567934e-01, 0.00000000e+00],\n",
       "       [0.00000000e+00, 0.00000000e+00, 0.00000000e+00, ...,\n",
       "        2.49905465e+00, 2.50882594e+00, 0.00000000e+00]])"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "gbm_n6_generator.matrix"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "97797d76",
   "metadata": {},
   "source": [
    "Or we can input RA and DEC to create a 3ML style OGIP response directly:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "7735a8eb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-08-24T17:12:55.236569Z",
     "iopub.status.busy": "2021-08-24T17:12:55.234833Z",
     "iopub.status.idle": "2021-08-24T17:12:55.348342Z",
     "shell.execute_reply": "2021-08-24T17:12:55.349031Z"
    }
   },
   "outputs": [],
   "source": [
    "response = gbm_n6_generator.to_3ML_response(ra=329,dec = -38.2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "ae9be31e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-08-24T17:12:55.353486Z",
     "iopub.status.busy": "2021-08-24T17:12:55.352872Z",
     "iopub.status.idle": "2021-08-24T17:12:55.906663Z",
     "shell.execute_reply": "2021-08-24T17:12:55.905632Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "WARNING MatplotlibDeprecationWarning: You are modifying the state of a globally registered colormap. This has been deprecated since 3.3 and in 3.6, you will not be able to modify a registered colormap in-place. To remove this warning, you can make a copy of the colormap first. cmap = mpl.cm.get_cmap(\"ocean\").copy()\n",
      "\n"
     ]
    }
   ],
   "source": [
    "fig = response.plot_matrix()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1c4ba943",
   "metadata": {},
   "source": [
    "To see how the effective area varies with location, we can loop through various angles."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "225668ba",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-08-24T17:12:55.957745Z",
     "iopub.status.busy": "2021-08-24T17:12:55.941245Z",
     "iopub.status.idle": "2021-08-24T17:12:57.188802Z",
     "shell.execute_reply": "2021-08-24T17:12:57.189234Z"
    }
   },
   "outputs": [],
   "source": [
    "fig, ax = plt.subplots()\n",
    "\n",
    "bounds = np.vstack((gbm_n6_generator.monte_carlo_energies[:-1],gbm_n6_generator.monte_carlo_energies[1:])).T\n",
    "de = np.diff(bounds)\n",
    "ene = np.mean(bounds,axis=1)\n",
    "\n",
    "for ra in np.linspace(260, 350, 10):\n",
    "    \n",
    "    gbm_n6_generator.set_location(ra=ra,dec = -38.2)\n",
    "\n",
    "    ax.loglog(ene,gbm_n6_generator.matrix.sum(axis=0),label=r'%d$^{\\circ}$'%ra)\n",
    "\n",
    "ax.set_ylim(1)\n",
    "ax.legend()\n",
    "ax.set_xlabel(r'Effective Area (cm$^2$)');\n",
    "ax.set_xlabel('MC Energies');"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "974536e0",
   "metadata": {},
   "source": [
    "## Into the details\n",
    "\n",
    "Ok, now let's go through the various specifics of the DRM generator constructor.\n",
    "\n",
    "\n",
    "First, the generator needs to know:\n",
    "\n",
    "* The current location and oreintation of GBM for the data of interest.\n",
    "\n",
    "* The channel to PHA reconstructed energy from the CSPEC files. \n",
    "\n",
    "\n",
    "For the first, one can get the current spacecraft from the either the triggers trigdat file, or for non-trggered data, one can obtain the position history file. These are available at the [NASA database](https://heasarc.gsfc.nasa.gov/FTP/fermi/data/gbm/). If using a position history file. You need to specify ```T0=<Fermi MET>``` in the constructor so that the time coordinate will be relative to this MET.\n",
    "\n",
    "Internally, the class uses [gbmgeometry](https://gbmgeometry.readthedocs.io/en/latest/) to convert RA,Dec to the approriate spacecraft coordinates. However, one can also create DRMs in spacecraft coordinates directly. \n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ad451339",
   "metadata": {},
   "source": [
    "## custom energy binning\n",
    "\n",
    "Maybe you are a curious person and want to investigate a response with finer input energies to model line features in solar flares? \n",
    "\n",
    "It is possible to add a custom array of input energies. To do this we need to import the ```NaITTEEdges``` and ```BgoTTEEdges``` classes.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "7b10b8d1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-08-24T17:12:57.193450Z",
     "iopub.status.busy": "2021-08-24T17:12:57.192946Z",
     "iopub.status.idle": "2021-08-24T17:12:57.196398Z",
     "shell.execute_reply": "2021-08-24T17:12:57.195958Z"
    }
   },
   "outputs": [],
   "source": [
    "from gbm_drm_gen import  NaiTTEEdges, BgoTTEEdges"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bfb13bd8",
   "metadata": {},
   "source": [
    "These objects allow you to specify input (monte carlo) energies either from an array or in log spaced binning.\n",
    "\n",
    "<div class=\"alert alert-info\">\n",
    "\n",
    "**Note:** The number of energies must be off and include the low and high end points which are specific to the NaI [5.0, 50000.0] and BGO [100., 200000.0] detectors.\n",
    "\n",
    "</div>\n",
    "\n",
    "### Log-spaced energies\n",
    "\n",
    "First we will try with **VERY** fine log spaced binning above the typical 140 input energies\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "33dd1cc4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-08-24T17:12:57.201937Z",
     "iopub.status.busy": "2021-08-24T17:12:57.201156Z",
     "iopub.status.idle": "2021-08-24T17:13:02.916410Z",
     "shell.execute_reply": "2021-08-24T17:13:02.915869Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "WARNING MatplotlibDeprecationWarning: You are modifying the state of a globally registered colormap. This has been deprecated since 3.3 and in 3.6, you will not be able to modify a registered colormap in-place. To remove this warning, you can make a copy of the colormap first. cmap = mpl.cm.get_cmap(\"ocean\").copy()\n",
      "\n"
     ]
    }
   ],
   "source": [
    "custom_edges = NaiTTEEdges.from_log_bins(n_bins=531)\n",
    "\n",
    "\n",
    "gbm_n6_generator = DRMGen.from_128_bin_data(det_name= \"n6\",\n",
    "                             trigdat = trigdat_file,\n",
    "                             mat_type = 2, # direct response + atmospheric scattering\n",
    "                             cspecfile = cspec_file,\n",
    "                             # pass the custom edges\n",
    "                             custom_input_edges=custom_edges\n",
    "                            \n",
    "                            )\n",
    "\n",
    "\n",
    "response = gbm_n6_generator.to_3ML_response(ra=329,dec = -38.2)\n",
    "\n",
    "fig = response.plot_matrix()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "360905ca",
   "metadata": {},
   "source": [
    "And now with a much coarser input binning:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "e644d557",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-08-24T17:13:02.925944Z",
     "iopub.status.busy": "2021-08-24T17:13:02.921258Z",
     "iopub.status.idle": "2021-08-24T17:13:03.929268Z",
     "shell.execute_reply": "2021-08-24T17:13:03.928820Z"
    }
   },
   "outputs": [],
   "source": [
    "custom_edges = NaiTTEEdges.from_log_bins(n_bins=73)\n",
    "\n",
    "\n",
    "gbm_n6_generator =  DRMGen.from_128_bin_data(det_name= \"n6\",\n",
    "                             trigdat = trigdat_file,\n",
    "                             mat_type = 2, # direct response + atmospheric scattering\n",
    "                             cspecfile = cspec_file,\n",
    "                             # pass the custom edges\n",
    "                             custom_input_edges=custom_edges\n",
    "                            \n",
    "                            )\n",
    "\n",
    "\n",
    "response = gbm_n6_generator.to_3ML_response(ra=329,dec = -38.2)\n",
    "\n",
    "fig = response.plot_matrix()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d93bb8e9",
   "metadata": {},
   "source": [
    "It is easier to see the difference with simple matrix plotting:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "39b8a3cc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-08-24T17:13:03.941828Z",
     "iopub.status.busy": "2021-08-24T17:13:03.936613Z",
     "iopub.status.idle": "2021-08-24T17:13:05.583537Z",
     "shell.execute_reply": "2021-08-24T17:13:05.584285Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.image.AxesImage at 0x7f1d1443b820>"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "WARNING RuntimeWarning: overflow encountered in double_scalars\n",
      "\n",
      "\n",
      "WARNING RuntimeWarning: overflow encountered in double_scalars\n",
      "\n"
     ]
    }
   ],
   "source": [
    "custom_edges = NaiTTEEdges.from_log_bins(n_bins=91)\n",
    "\n",
    "\n",
    "gbm_n6_generator =  DRMGen.from_128_bin_data(det_name= \"n6\",\n",
    "                             trigdat = trigdat_file,\n",
    "                             mat_type = 2, # direct response + atmospheric scattering\n",
    "                             cspecfile = cspec_file,\n",
    "                             # pass the custom edges\n",
    "                             custom_input_edges=custom_edges\n",
    "                            \n",
    "                            )\n",
    "\n",
    "gbm_n6_generator.set_location(ra=329,dec = -38.2)\n",
    "\n",
    "\n",
    "plt.matshow(gbm_n6_generator.matrix.T)\n",
    "\n",
    "custom_edges = NaiTTEEdges.from_log_bins(n_bins=141)\n",
    "\n",
    "\n",
    "gbm_n6_generator =  DRMGen.from_128_bin_data(det_name= \"n6\",\n",
    "                             trigdat = trigdat_file,\n",
    "                             mat_type = 2, # direct response + atmospheric scattering\n",
    "                             cspecfile = cspec_file,\n",
    "                             # pass the custom edges\n",
    "                             custom_input_edges=custom_edges\n",
    "                            \n",
    "                            )\n",
    "\n",
    "gbm_n6_generator.set_location(ra=329,dec = -38.2)\n",
    "\n",
    "\n",
    "plt.matshow(gbm_n6_generator.matrix.T)\n",
    "\n",
    "\n",
    "\n",
    "custom_edges = NaiTTEEdges.from_log_bins(n_bins=1541)\n",
    "\n",
    "\n",
    "gbm_n6_generator =  DRMGen.from_128_bin_data(det_name= \"n6\",\n",
    "                             trigdat = trigdat_file,\n",
    "                             mat_type = 2, # direct response + atmospheric scattering\n",
    "                             cspecfile = cspec_file,\n",
    "                             # pass the custom edges\n",
    "                             custom_input_edges=custom_edges\n",
    "                            \n",
    "                            )\n",
    "\n",
    "gbm_n6_generator.set_location(ra=329,dec = -38.2)\n",
    "\n",
    "\n",
    "plt.matshow(gbm_n6_generator.matrix.T)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cae90429",
   "metadata": {},
   "source": [
    "### a custom array\n",
    "\n",
    "And we can even supply and entirely custom array of energies:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "1691d6a6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-08-24T17:13:05.591342Z",
     "iopub.status.busy": "2021-08-24T17:13:05.590565Z",
     "iopub.status.idle": "2021-08-24T17:13:06.505951Z",
     "shell.execute_reply": "2021-08-24T17:13:06.506548Z"
    }
   },
   "outputs": [],
   "source": [
    "edges = np.linspace(5., 50000., 1001)\n",
    "\n",
    "\n",
    "custom_edges = NaiTTEEdges.from_custom_array(edges)\n",
    "\n",
    "\n",
    "gbm_n6_generator =  DRMGen.from_128_bin_data(det_name= \"n6\",\n",
    "                             trigdat = trigdat_file,\n",
    "                             mat_type = 2, # direct response + atmospheric scattering\n",
    "                             cspecfile = cspec_file,\n",
    "                             # pass the custom edges\n",
    "                             custom_input_edges=custom_edges\n",
    "                            \n",
    "                            )\n",
    "\n",
    "\n",
    "response = gbm_n6_generator.to_3ML_response(ra=329,dec = -38.2)\n",
    "\n",
    "fig = response.plot_matrix()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7e38a487",
   "metadata": {},
   "source": [
    "## Creating RSP2 files"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "e1385f58",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-08-24T17:13:06.510264Z",
     "iopub.status.busy": "2021-08-24T17:13:06.509779Z",
     "iopub.status.idle": "2021-08-24T17:13:06.513283Z",
     "shell.execute_reply": "2021-08-24T17:13:06.512654Z"
    }
   },
   "outputs": [],
   "source": [
    "from gbm_drm_gen import create_rsp2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "6b5364a2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-08-24T17:13:06.517979Z",
     "iopub.status.busy": "2021-08-24T17:13:06.515759Z",
     "iopub.status.idle": "2021-08-24T17:13:06.849965Z",
     "shell.execute_reply": "2021-08-24T17:13:06.849516Z"
    }
   },
   "outputs": [],
   "source": [
    "# create the generator\n",
    "gbm_n6_generator = DRMGen.from_128_bin_data(det_name= \"n6\",\n",
    "                             time=0, # time relative to T0 or trigger time.\n",
    "                             trigdat = trigdat_file,\n",
    "                             mat_type = 2, # direct response + atmospheric scattering\n",
    "                             cspecfile = cspec_file)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "3ccb17a1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-08-24T17:13:06.853683Z",
     "iopub.status.busy": "2021-08-24T17:13:06.853215Z",
     "iopub.status.idle": "2021-08-24T17:13:06.856182Z",
     "shell.execute_reply": "2021-08-24T17:13:06.856841Z"
    }
   },
   "outputs": [],
   "source": [
    "output_file_name = \"my_new_rsp.rsp2\" # you must call it an RSP2 file!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "bd5cad33",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-08-24T17:13:06.870341Z",
     "iopub.status.busy": "2021-08-24T17:13:06.869615Z",
     "iopub.status.idle": "2021-08-24T17:13:07.440517Z",
     "shell.execute_reply": "2021-08-24T17:13:07.440020Z"
    }
   },
   "outputs": [],
   "source": [
    "create_rsp2(output_file_name,\n",
    "            response_generator=gbm_n6_generator,\n",
    "            ra=0,\n",
    "            dec=0,\n",
    "            tstart=0,\n",
    "            tstop=10,\n",
    "            delta_time=2,\n",
    "            overwrite=True\n",
    "           )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "23001ec1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-08-24T17:13:07.446169Z",
     "iopub.status.busy": "2021-08-24T17:13:07.445367Z",
     "iopub.status.idle": "2021-08-24T17:13:07.461083Z",
     "shell.execute_reply": "2021-08-24T17:13:07.461753Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Filename: my_new_rsp.rsp2\n",
      "No.    Name      Ver    Type      Cards   Dimensions   Format\n",
      "  0  PRIMARY       1 PrimaryHDU       5   ()      \n",
      "  1  EBOUNDS       1 BinTableHDU     28   128R x 3C   [K, E, E]   \n",
      "  2  SPECRESP MATRIX    1 BinTableHDU     42   140R x 6C   [E, E, I, I, I, 128D]   \n",
      "  3  SPECRESP MATRIX    2 BinTableHDU     42   140R x 6C   [E, E, I, I, I, 128D]   \n",
      "  4  SPECRESP MATRIX    3 BinTableHDU     42   140R x 6C   [E, E, I, I, I, 128D]   \n",
      "  5  SPECRESP MATRIX    4 BinTableHDU     42   140R x 6C   [E, E, I, I, I, 128D]   \n",
      "  6  SPECRESP MATRIX    5 BinTableHDU     42   140R x 6C   [E, E, I, I, I, 128D]   \n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "5\n",
      "332916465.760476\n",
      "332916467.760476\n"
     ]
    }
   ],
   "source": [
    "with fits.open(output_file_name) as f:\n",
    "    \n",
    "    f.info()\n",
    "    \n",
    "    print(f[0].header['DRM_NUM'])\n",
    "    print(f[2].header['TSTART'])\n",
    "    print(f[2].header['TSTOP'])\n",
    "    \n",
    "   "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "7ffadbec",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-08-24T17:13:07.465285Z",
     "iopub.status.busy": "2021-08-24T17:13:07.464288Z",
     "iopub.status.idle": "2021-08-24T17:13:07.469395Z",
     "shell.execute_reply": "2021-08-24T17:13:07.468938Z"
    }
   },
   "outputs": [],
   "source": [
    "from threeML import TimeSeriesBuilder"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "640b204e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-08-24T17:13:07.473658Z",
     "iopub.status.busy": "2021-08-24T17:13:07.472775Z",
     "iopub.status.idle": "2021-08-24T17:13:09.644354Z",
     "shell.execute_reply": "2021-08-24T17:13:09.644981Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[\u001b[35mWARNING \u001b[0m]\u001b[35m The default choice for MATRIX extension failed:KeyError(\"Extension ('MATRIX', 1) not found.\")available: None 'EBOUNDS' 'SPECRESP MATRIX' 'SPECRESP MATRIX' 'SPECRESP MATRIX' 'SPECRESP MATRIX' 'SPECRESP MATRIX'\u001b[0m\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "WARNING FutureWarning: elementwise comparison failed; returning scalar instead, but in the future will perform elementwise comparison\n",
      "\n",
      "\n",
      "WARNING FutureWarning: elementwise comparison failed; returning scalar instead, but in the future will perform elementwise comparison\n",
      "\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "2d6c8cc942b544bab4ed70d7b11a1f05",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Loading PHAII Spectra:   0%|          | 0/2395 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[\u001b[35mWARNING \u001b[0m]\u001b[35m The default choice for MATRIX extension failed:KeyError(\"Extension ('MATRIX', 1) not found.\")available: None 'EBOUNDS' 'SPECRESP MATRIX' 'SPECRESP MATRIX' 'SPECRESP MATRIX' 'SPECRESP MATRIX' 'SPECRESP MATRIX'\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[\u001b[35mWARNING \u001b[0m]\u001b[35m The default choice for MATRIX extension failed:KeyError(\"Extension ('MATRIX', 2) not found.\")available: None 'EBOUNDS' 'SPECRESP MATRIX' 'SPECRESP MATRIX' 'SPECRESP MATRIX' 'SPECRESP MATRIX' 'SPECRESP MATRIX'\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[\u001b[35mWARNING \u001b[0m]\u001b[35m The default choice for MATRIX extension failed:KeyError(\"Extension ('MATRIX', 3) not found.\")available: None 'EBOUNDS' 'SPECRESP MATRIX' 'SPECRESP MATRIX' 'SPECRESP MATRIX' 'SPECRESP MATRIX' 'SPECRESP MATRIX'\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[\u001b[35mWARNING \u001b[0m]\u001b[35m The default choice for MATRIX extension failed:KeyError(\"Extension ('MATRIX', 4) not found.\")available: None 'EBOUNDS' 'SPECRESP MATRIX' 'SPECRESP MATRIX' 'SPECRESP MATRIX' 'SPECRESP MATRIX' 'SPECRESP MATRIX'\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[\u001b[35mWARNING \u001b[0m]\u001b[35m The default choice for MATRIX extension failed:KeyError(\"Extension ('MATRIX', 5) not found.\")available: None 'EBOUNDS' 'SPECRESP MATRIX' 'SPECRESP MATRIX' 'SPECRESP MATRIX' 'SPECRESP MATRIX' 'SPECRESP MATRIX'\u001b[0m\n"
     ]
    }
   ],
   "source": [
    "tsb = TimeSeriesBuilder.from_gbm_cspec_or_ctime(\"cspec\", cspec_or_ctime_file=cspec_file, rsp_file=\"my_new_rsp.rsp2\")\n",
    "\n",
    "tsb.view_lightcurve();\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "222570f1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-08-24T17:13:09.648243Z",
     "iopub.status.busy": "2021-08-24T17:13:09.647707Z",
     "iopub.status.idle": "2021-08-24T17:13:09.669888Z",
     "shell.execute_reply": "2021-08-24T17:13:09.670462Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[\u001b[32mINFO    \u001b[0m]\u001b[32m Interval set to 0.7039839625358582-4.800044000148773 for cspec\u001b[0m\n"
     ]
    }
   ],
   "source": [
    "tsb.set_active_time_interval('1-5')"
   ]
  }
 ],
 "metadata": {
  "jupytext": {
   "formats": "ipynb,md"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.11"
  },
  "widgets": {
   "application/vnd.jupyter.widget-state+json": {
    "state": {
     "0cb90047d8c44715b282a3489b09200e": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "DescriptionStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "StyleView",
       "description_width": ""
      }
     },
     "2d6c8cc942b544bab4ed70d7b11a1f05": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_84001f5d8a024ab5b73c016837ba3d1c",
        "IPY_MODEL_dbb370a70756408487656716b53e07b5",
        "IPY_MODEL_dcb4da9dc4c2464e94d5b3f9345d5bee"
       ],
       "layout": "IPY_MODEL_f59c0e3cdb974ceaa1eb9cf5f4126903"
      }
     },
     "30ac072b15b7400daf3c71fa2e555655": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": "2",
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "65866fac174040bfb63082aaffb89a8c": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "StyleView",
       "bar_color": "#440154",
       "description_width": ""
      }
     },
     "84001f5d8a024ab5b73c016837ba3d1c": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_tooltip": null,
       "layout": "IPY_MODEL_99ce846598d348f48ffec3f0ca3d1162",
       "placeholder": "​",
       "style": "IPY_MODEL_b1ae2afeb7724070876b6cdaabee420d",
       "value": "Loading PHAII Spectra: 100%"
      }
     },
     "99ce846598d348f48ffec3f0ca3d1162": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "b1ae2afeb7724070876b6cdaabee420d": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "DescriptionStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "StyleView",
       "description_width": ""
      }
     },
     "bb74e65f54ae443eabd69d3dd2997de5": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "dbb370a70756408487656716b53e07b5": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_tooltip": null,
       "layout": "IPY_MODEL_30ac072b15b7400daf3c71fa2e555655",
       "max": 2395.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_65866fac174040bfb63082aaffb89a8c",
       "value": 2395.0
      }
     },
     "dcb4da9dc4c2464e94d5b3f9345d5bee": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_tooltip": null,
       "layout": "IPY_MODEL_bb74e65f54ae443eabd69d3dd2997de5",
       "placeholder": "​",
       "style": "IPY_MODEL_0cb90047d8c44715b282a3489b09200e",
       "value": " 2395/2395 [00:01&lt;00:00, 1153.44it/s]"
      }
     },
     "f59c0e3cdb974ceaa1eb9cf5f4126903": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": "inline-flex",
       "flex": null,
       "flex_flow": "row wrap",
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": "100%"
      }
     }
    },
    "version_major": 2,
    "version_minor": 0
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
